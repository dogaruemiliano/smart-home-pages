{"version":3,"sources":["assets/icons/air-conditioner-colored.png","assets/icons/off.png","assets/icons/on.png","assets/icons/cold.png","assets/icons/hot.png","components/UI/Button.tsx","components/auth/Input.tsx","components/auth/AuthForm.tsx","components/auth/AuthContent.tsx","components/user/ProfileButton.tsx","components/Home/FloorPlan/Line.tsx","components/Home/FloorPlan/MapHelpers.ts","components/Home/FloorPlan/Building.tsx","components/Home/FloorPlan/RoomContainer.tsx","components/Home/FloorPlan/Rooms.tsx","components/Home/FloorPlan/FloorPlan.tsx","screens/HomeScreen.tsx","screens/ProfileScreen.tsx","components/AcController/Buttons/RemoteBaseButton.tsx","components/AcController/Buttons/FanSpeedButtton.tsx","components/AcController/Buttons/ModeButton.tsx","components/AcController/Buttons/PowerButton.tsx","components/AcController/Buttons/Arrow.tsx","components/AcController/Buttons/TemperatureDownButton.tsx","components/AcController/Buttons/TemperatureUpButton.tsx","components/AcController/Buttons/index.tsx","components/AcController/Display/Temperature.tsx","components/AcController/Display/Fan.tsx","components/AcController/Display/Mode.tsx","components/AcController/Display/index.tsx","components/AcController/Remote.tsx","screens/AcRemoteScreen.tsx","navigation/Navigation.tsx"],"names":["module","exports","Button","onPress","isLoading","children","disabled","margin","buttonStyles","styles","button","Pressable","style","pressed","View","ActivityIndicator","size","color","Colors","neutral","Text","buttonText","StyleSheet","create","borderRadius","paddingVertical","paddingHorizontal","backgroundColor","primary","elevation","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","opacity","textAlign","secondary","fontSize","fontWeight","inputContainer","marginVertical","borderBottomColor","borderBottomWidth","label","marginBottom","labelInvalid","error500","input","inputInvalid","error100","form","buttons","marginTop","authContent","marginHorizontal","padding","ProfileButton","AntDesign","name","borderColor","borderWidth","stylesGenerator","points","component","position","top","lineWidth","start","Line","props","isHorizontal","maxXY","coordinates","maxX","maxY","forEach","polygon","geometry","point","value","roomsCoordinates","roomsData","scale","map","room","room_coordinates","index","type","traslateRoomCoordinatesToScale","builduingCoordinates","walls","rooms","wall","traslateBuildingCoordinatesScale","Building","buildingData","createPolygonSize","Math","abs","justifyContent","alignItems","RoomContainer","dispatch","useDispatch","properties","isLightOn","useSelector","state","home","find","id","light","undefined","empty","toggleLight","roomId","Rooms","roomData","flex","imageContainer","end","image","FloorPlan","navigate","useNavigation","Image","source","require","rootContainer","title","HomeScreen","navigation","useLayoutEffect","setOptions","headerRight","screen","ProfileScreen","logout","maxWidth","maxHeight","outlineWidth","text","RemoteBaseButton","onLongPress","dispatchAction","entering","exiting","SlideInLeft","SlideOutLeft","transparent","FanSpeedButton","isOn","ac","settings","power","changeFanSpeed","SlideInRight","SlideOutRight","FontAwesome5","mainContainer","flexDirection","topContainer","bottomContainer","icon","ModeButton","console","log","changeMode","Ionicons","MaterialIcons","PowerButton","turnOff","turnOn","arrow","borderStartWidth","borderStartColor","borderEndWidth","borderEndColor","up","transform","rotate","right","down","left","Arrow","direction","paddingLeft","marginLeft","TemperatureDownButton","lowerTemperature","TemperatureUpButton","raiseTemperature","powerButtonContainer","buttonsColumn","AcButtons","generalText","temperatureText","units","Temperature","temperature","mode","useState","dynamicStyle","setDynamicStyle","useEffect","Fan","speed","fanSpeed","animationValue","useRef","Animated","Value","current","spin","interpolate","inputRange","outputRange","stopAnimation","setValue","loop","timing","toValue","duration","easing","Easing","linear","useNativeDriver","stop","MaterialCommunityIcons","Mode","bottomBar","AcDisplay","display","Remote","AcRemoteScreen","Stack","createNativeStackNavigator","AuthenticatedStack","Navigator","screenOptions","headerStyle","headerShadowVisible","headerTintColor","contentStyle","Screen","Navigation","authData","getAuthDataFromSecureAsync","token","isAuthenticated","setState","auth","NavigationContainer"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,qD,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,gC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oxBCmB3C,IAyBeC,EAzBiB,SAAC,GAM1B,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,UAEAC,GAEI,EAHJC,SAGI,EAFJD,UACAE,EACI,EADJA,OAEMC,EAAY,OAAQC,EAAOC,QAAf,IAAuBH,OAAQA,IACjD,OACE,cAACI,EAAA,QAAD,CACEC,MAAO,gBAAGC,EAAH,EAAGA,QAAH,MAAiB,CAACL,EAAcK,GAAWJ,EAAOI,UACzDV,QAASA,EACTG,WAAYF,EAHd,SAKE,cAACU,EAAA,QAAD,UACGV,EACC,cAACW,EAAA,QAAD,CAAmBC,KAAM,QAASC,MAAOC,SAAOC,UAEhD,cAACC,EAAA,QAAD,CAAMR,MAAOH,EAAOY,WAApB,SAAiChB,SASrCI,EAASa,UAAWC,OAAO,CAC/Bb,OAAQ,CACNc,aAAc,EACdC,gBAAiB,EACjBC,kBAAmB,GACnBC,gBAAiBT,SAAOU,QACxBC,UAAW,EACXC,YAAa,QACbC,aAAc,CAAEC,MAAO,EAAGC,OAAQ,GAClCC,cAAe,IACfC,aAAc,GAEhBtB,QAAS,CACPuB,QAAS,IAEXf,WAAY,CACVgB,UAAW,SACXpB,MAAOC,SAAOoB,UACdC,SAAU,GACVC,WAAY,S,OCvBDlB,UAAWC,OAAO,CAC/BkB,eAAgB,CACdC,eAAgB,EAChBC,kBAAmBzB,SAAOU,QAC1BgB,kBAAmB,GAErBC,MAAO,CACL5B,MAAOC,SAAOU,QACdkB,aAAc,GAEhBC,aAAc,CACZ9B,MAAOC,SAAO8B,UAEhBC,MAAO,CACLxB,gBAAiB,EACjBC,kBAAmB,EACnBC,gBAAiBT,SAAOoB,UACxBd,aAAc,EACde,SAAU,IAEZW,aAAc,CACZvB,gBAAiBT,SAAOiC,YCwBb7B,UAAWC,OAAO,CAC/B6B,KAAM,GACNC,QAAS,CACPC,UAAW,MCxBAhC,UAAWC,OAAO,CAC/BgC,YAAa,CACXD,UAAW,GACXE,iBAAkB,GAClBC,QAAS,GACTjC,aAAc,EACdG,gBAAiBT,SAAOoB,UACxBT,UAAW,EACXC,YAAa,QACbC,aAAc,CAAEC,MAAO,EAAGC,OAAQ,GAClCC,cAAe,IACfC,aAAc,GAEhBkB,QAAS,CACPC,UAAW,KDtDf,I,iBEKeI,EAZwB,SAAC,GAAgD,IAA9CvD,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,UAAWE,EAAyB,EAAzBA,SAAyB,EAAfD,SACtE,OACE,cAACM,EAAA,QAAD,CACEC,MAAO,gBAAGC,EAAH,EAAGA,QAAH,MAAiB,CAACJ,EAAOC,OAAQG,GAAWJ,EAAOI,UAC1DV,QAASA,EACTG,SAAUF,GAAaE,EAHzB,SAKE,cAACqD,EAAA,QAAD,CAAWC,KAAK,OAAO5C,KAAM,GAAIC,MAAOC,SAAOC,aAO/CV,EAASa,UAAWC,OAAO,CAC/Bb,OAAQ,CACNc,aAAc,GACdqC,YAAa3C,SAAOC,QACpB2C,YAAa,EAIbjC,UAAW,EACXC,YAAa,QACbC,aAAc,CAAEC,MAAO,EAAGC,OAAQ,GAClCC,cAAe,IACfC,aAAc,GAEhBtB,QAAS,CACPuB,QAAS,IAEXf,WAAY,CACVgB,UAAW,SACXpB,MAAOC,SAAOC,QACdoB,SAAU,GACVC,WAAY,U,iBC/BVuB,EAAkB,SACtBC,EACAhC,EACAC,GAHsB,OAKtBX,UAAWC,OAAO,CAChB0C,UAAW,CACTC,SAAU,WACVC,IAAKH,EAAO,GAAG,GAAKI,EACpBC,MAAOL,EAAO,GAAG,GAAKI,EACtBpC,MAAOA,EACPC,OAAQA,EACRN,gBAAiBT,SAAOC,YAIfmD,EAhCoC,SAACC,GAClD,IAAQP,EAAWO,EAAXP,OACFQ,EACJR,EAAO,GAAG,KAAOA,EAAO,GAAG,IAAMA,EAAO,GAAG,KAAOA,EAAO,GAAG,GACxDhC,EAAQwC,EACVR,EAAO,GAAG,GAAKA,EAAO,GAAG,GAAKI,EAPlB,EASVnC,EAASuC,EATC,EAWZR,EAAO,GAAG,GAAKA,EAAO,GAAG,GAAKI,EAE5B3D,EAASsD,EAAgBC,EAAQhC,EAAOC,GAE9C,OAAO,cAACnB,EAAA,QAAD,CAAMF,MAAOH,EAAOwD,a,ikBCjB7B,IAAMQ,EAAQ,SAACC,GACb,IAAIC,EAAO,EACPC,EAAO,EAaX,OAZAF,EAAYG,SAAQ,SAACC,GAAD,OAClBA,EAAQC,SAASL,YAAYG,SAAQ,SAACG,GAAD,OACnCA,EAAMH,SAAQ,SAACI,GACTN,EAAOM,EAAM,KACfN,EAAOM,EAAM,IAEXL,EAAOK,EAAM,KACfL,EAAOK,EAAM,aAKd,CAAEN,KAAMA,EAAMC,KAAMA,IAyChBM,EAAmB,SAACC,EAAmBC,GAApB,OAtCc,SAACA,EAAeV,GAC5D,MAAuBD,EAAMC,GAArBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAEd,OAAOF,EAAYW,KAAI,SAACC,GACtB,IAAMC,EAAmBD,EAAKP,SAASL,YAAYW,KAAI,SAACP,GAQtD,OAP4BA,EAAQO,KAClC,SAACJ,EAAOO,GAAR,MACE,EACGP,EAAM,GAAKN,EAAO,GAAKS,EAAgB,EAARI,GAC/BP,EAAM,GAAKL,EAAO,GAAKQ,EAAgB,EAARI,SAKxC,OAAO,OACFF,GADL,IAEEP,SAAU,CAAEU,KAAMH,EAAKP,SAASU,KAAMf,YAAaa,QAuBvDG,CAA+B,IAAKP,IAEzBQ,EAAuB,SAACC,EAAeT,EAAmBC,GAAnC,OApBY,SAC9CA,EACAQ,EACAC,GAEA,MAAuBpB,EAAMoB,GAArBlB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAGd,OAAOgB,EAAMP,KAAI,SAACS,EAAMN,GAKtB,MAAO,CAAExB,OAJW8B,EAAK9B,OAAOqB,KAAI,SAACL,GAAD,MAAW,EAC5CA,EAAM,GAAKL,EAAO,GAAKS,EAAgB,EAARI,GAC/BR,EAAM,GAAKJ,EAAO,GAAKQ,EAAgB,EAARI,UAUpCO,CAAiCX,EAAOQ,EAAOT,ICtClCa,GAJA1E,UAAWC,OAAO,CAC/B0C,UAAW,KAdkB,SAACM,GAC9B,OACE,mCACGoB,EAAqBM,eAAcd,YAL5B,KAK8CE,KAAI,SAACS,GAAD,OACxD,cAAC,EAAD,CACE9B,OAAQ8B,EAAK9B,QADf,GAEU8B,EAAK9B,OAAO,GAAG,GAAK8B,EAAK9B,OAAO,GAAG,GAAK8B,EAAK9B,OAAO,GAAG,GAAK8B,EAAK9B,OAAO,GAAG,W,ykBCN7F,IAYMkC,EAAoB,SAAClC,GACzB,IAAI/B,EAASkE,KAAKC,IAAIpC,EAAO,GAAG,GAAKA,EAAO,GAAG,IAC3ChC,EAAQmE,KAAKC,IAAIpC,EAAO,GAAG,GAAKA,EAAO,GAAG,IAS9C,OAPc1C,UAAWC,OAAO,CAC9BuD,QAAS,CACP9C,MAAOA,EACPC,OAAQA,KAIC6C,SAiDTrE,EAASa,UAAWC,OAAO,CAC/B0C,UAAW,CAIToC,eAAgB,SAChBC,WAAY,UAEdzD,MAAO,CACL5B,MAAOC,SAAOC,QACdoB,SAAU,KAICgE,EAzDV,SAAChC,GACJ,IA9B6BP,EA8BvBwC,EAAWC,wBACT/B,EAA4BH,EAA5BG,YAAagC,EAAenC,EAAfmC,WAEfC,EAAYC,uBAChB,SAACC,GAAD,cACG,SAACA,EAAMC,KAAKjB,MAAMkB,MACjB,SAACzB,GAAD,OAAgBA,EAAKoB,WAAWM,KAAON,EAAWM,SADlD,EAECN,WAAWC,cAGdhF,EAAkBgF,EAAYzF,SAAO+F,WAAQC,EAGjD,OAFAvF,EAAkB+E,EAAWS,MAAQjG,SAAOC,QAAUQ,EAGpD,cAAChB,EAAA,QAAD,CACER,QAAS,WACFuG,EAAWS,OACdX,EAASY,sBAAY,CAAEC,OAAQX,EAAWM,OAG9CpG,OAlDyBoD,EAkDIU,EAjDnBpD,UAAWC,OAAO,CAC9BuD,QAAS,CACPZ,SAAU,WACVC,IAAKH,EAAO,GAAG,GACfK,MAAOL,EAAO,GAAG,MAIRc,SAmCX,SAQE,cAAChE,EAAA,QAAD,CACEF,MAAK,SACAsF,EAAkBxB,IAClBjE,EAAOwD,WAFP,IAGHtC,gBAAiBA,IAJrB,SAOE,cAACP,EAAA,QAAD,CACER,MAAK,OACAH,EAAOoC,OADP,IAEH5B,MAAO0F,EAAYzF,SAAOU,QAAUV,SAAOC,UAH/C,SAMGuF,EAAW9C,YC7CP0D,GAJAhG,UAAWC,OAAO,CAC/B0C,UAAW,KAjBe,SAACM,GAC3B,OACE,mCACGW,EAAiBC,aAAkBE,KAAI,SAACkC,GAAD,OACtCA,EAASxC,SAASL,YAAYW,KAAI,SAACP,EAASU,GAAV,OAChC,cAAC,EAAD,CACEd,YAAaI,EACb4B,WAAYa,EAASb,YAChBa,EAASb,WAAW9C,KAAO4B,aCkCtC/E,EAASa,UAAWC,OAAO,CAC/B0C,UAAW,CACTuD,KAAM,EACNnB,eAAgB,SAChBC,WAAY,UAEdmB,eAAgB,CACdvD,SAAU,WACVwD,IAAK,MACLvD,IAAK,MACLlC,OAAQ,IACRD,MAAO,KAET2F,MAAO,CACL1F,OAAQ,IACRD,MAAO,OAII4F,EAlDiB,SAACrD,GAC/B,IAAQsD,EAAaC,0BAAbD,SAWR,OACE,eAAC/G,EAAA,QAAD,CAAMF,MAAOH,EAAOwD,UAApB,UACE,cAACtD,EAAA,QAAD,CACER,QAAS,kBAAM0H,EAAS,aACxBjH,MAAOH,EAAOgH,eAFhB,SAIE,cAACM,EAAA,QAAD,CACEC,OAAQC,EAAQ,KAChBrH,MAAOH,EAAOkH,UAGlB,eAAC7G,EAAA,QAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,WCVFL,EAASa,UAAWC,OAAO,CAC/B2G,cAAe,CACbV,KAAM,GAERW,MAAO,CACL5F,SAAU,GACVC,WAAY,OACZM,aAAc,GAEhB2E,eAAgB,CACdxF,OAAQ,GACRD,MAAO,GACPL,gBAAiB,QAEnBgG,MAAO,CACL1F,OAAQ,GACRD,MAAO,MAIIoG,EAvCqB,SAAC7D,GACnC,IAAQ8D,EAAe9D,EAAf8D,WAUR,OARAC,2BAAgB,WACdD,EAAWE,WAAW,CACpBC,YAAa,kBACX,cAAC,EAAD,CAAerI,QAAS,kBAAMkI,EAAWR,SAAS,mBAGrD,CAACQ,IAGF,cAACvH,EAAA,QAAD,CAAMF,MAAOH,EAAOyH,cAApB,SAEE,cAAC,EAAD,OCPAzH,EAASa,UAAWC,OAAO,CAC/BkH,OAAQ,CACNjB,KAAM,EACNnB,eAAgB,SAChBC,WAAY,YAIDoC,EAnBwB,SAACnE,GACfA,EAAf8D,WAAR,IACM7B,EAAWC,wBAEjB,OACE,cAAC3F,EAAA,QAAD,CAAMF,MAAOH,EAAOgI,OAApB,SACE,cAAC,EAAD,CAAQtI,QAAS,kBAAMqG,EAASmC,qBAAhC,uB,2BCqDOlI,GAASa,UAAWC,OAAO,CACtC0C,UAAW,CACTuD,KAAM,EACNxF,MAAO,IACP4G,SAAU,IACV3G,OAAQ,GACR4G,UAAW,GACXlH,gBAAiBT,SAAOoB,UACxBwB,YAAa,EACbtC,aAAc,EAIdiC,QAAS,EACT4C,eAAgB,SAChBC,WAAY,SACZnE,aAAc,EACdD,cAAe,GACfH,aAAc,CAAEE,OAAQ,EAAGD,MAAO,GAClCH,UAAW,EACXiH,aAAc,GAEhBC,KAAM,CACJ9H,MAAOC,SAAOC,WAIH6H,GArEV,SAACzE,GACJ,IACElE,EAOEkE,EAPFlE,SACAF,EAMEoE,EANFpE,QACA8I,EAKE1E,EALF0E,YACAC,EAIE3E,EAJF2E,eACA/B,EAGE5C,EAHF4C,MACAgC,EAEE5E,EAFF4E,SACAC,EACE7E,EADF6E,QAEI5C,EAAWC,wBASjB,OACE,cAAC,UAAS3F,KAAV,CACEqI,SAAUA,GAAsBE,eAChCD,QAASA,GAAoBE,gBAC7B1I,MAAO,CACLH,GAAOwD,UACP,CACEJ,YAAasD,EAAQjG,SAAOqI,YAAcrI,SAAOC,QACjDQ,gBAAiBwF,EAAQjG,SAAOqI,YAAcrI,SAAOoB,YAP3D,SAWE,cAAC3B,EAAA,QAAD,CACER,QApBc,WACbgH,IACHhH,GAAWA,IACX+I,GAAkB1C,EAAS0C,OAkBzBD,YAAaA,EACbrI,MAAO,CAAEkD,YAAa,GAHxB,UAKIqD,GAAS9G,O,UCxCJmJ,GAfsB,SAACjF,GACpC,IAAMkF,EAAO7C,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAASC,SAEjE,OACE,cAAC,GAAD,CACEV,eAAgBW,iBAChB1C,OAAQsC,EACRN,SAAUW,gBACVV,QAASW,iBAJX,SAME,cAACC,GAAA,QAAD,CAAcpG,KAAK,MAAM5C,KAAM,GAAIC,MAAOC,SAAOC,a,oBC2CjDV,GAASa,UAAWC,OAAO,CAC/BwH,KAAM,CACJ9H,MAAOC,SAAOC,QACdqB,WAAY,QAEdyH,cAAe,CACbC,cAAe,SACf1C,KAAM,EACNxF,MAAO,OACPqE,eAAgB,gBAElB8D,aAAc,CACZD,cAAe,MACf7D,eAAgB,SAChBC,WAAY,UAEd8D,gBAAiB,CACfF,cAAe,MACf7D,eAAgB,SAChBC,WAAY,UAEd+D,KAAM,CACJ7G,iBAAkB,KAIP8G,GA9EkB,SAAC/F,GAChC,IAAMkF,EAAO7C,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAASC,SAGjE,OACE,cAAC,GAAD,CACEzJ,QAHgB,kBAAMoK,QAAQC,IAAI,eAIlCtB,eAAgBuB,aAChBtD,OAAQsC,EAHV,SAOE,eAAC3I,EAAA,QAAD,CAAMF,MAAOH,GAAOwJ,cAApB,UACE,eAACnJ,EAAA,QAAD,CAAMF,MAAOH,GAAO0J,aAApB,UACE,cAACH,GAAA,QAAD,CACEpG,KAAK,YACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,OAEhB,cAACK,GAAA,QAAD,CACE9G,KAAK,QACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,OAEhB,cAACL,GAAA,QAAD,CACEpG,KAAK,MACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,UAGlB,eAACvJ,EAAA,QAAD,CAAMF,MAAOH,GAAO2J,gBAApB,UACE,cAACJ,GAAA,QAAD,CACEpG,KAAK,MACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,OAEhB,cAACM,GAAA,QAAD,CACE/G,KAAK,kBACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,gBCnBpB5J,GAASa,UAAWC,OAAO,CAC/BoG,MAAO,CACL1F,OAAQ,GACRD,MAAO,MAGI4I,GAjCmB,SAACrG,GACjC,IAAMkF,EAAO7C,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAASC,SAIjE,OACE,cAAC,GAAD,CACEzJ,QAJgB,kBAAMoK,QAAQC,IAAI,gBAKlCtB,eAAgBO,EAAOoB,UAAUC,SAFnC,SAMGrB,EACC,cAAC1B,EAAA,QAAD,CACEC,OAAQC,EAAQ,KAChBrH,MAAOH,GAAOkH,QAGhB,cAACI,EAAA,QAAD,CACEC,OAAQC,EAAQ,KAChBrH,MAAOH,GAAOkH,W,qkBCxBxB,IAMMlH,GAASa,UAAWC,OAAO,CAC/BwJ,MAAO,CACL/I,MAAO,EACPC,OAAQ,EAER+I,iBAAkB,GAClBC,iBAAkB,mBAElBC,eAAgB,GAChBC,eAAgB,mBAEhBvI,kBAAmB,GACnBD,kBAAmBzB,SAAOC,SAE5BiK,GAAI,CACFC,UAAW,CAAC,CAAEC,OAAQ,UAExBC,MAAO,CACLF,UAAW,CAAC,CAAEC,OAAQ,WAGxBE,KAAM,CACJH,UAAW,CAAC,CAAEC,OAAQ,YAExBG,KAAM,CACJJ,UAAW,CAAC,CAAEC,OAAQ,cAIXI,GAnC6C,SAACnH,GAC3D,IAAQoH,EAAcpH,EAAdoH,UAER,OAAO,cAAC7K,EAAA,QAAD,CAAMF,MAAK,SAAOH,GAAOsK,OAAUtK,GAAOkL,OC0B7ClL,GAASa,UAAWC,OAAO,CAC/BkG,eAAgB,CACdD,KAAM,EACNnB,eAAgB,SAChBC,WAAY,SACZ4D,cAAe,MACf0B,YAAa,IAEfjE,MAAO,CACL1F,OAAQ,GACRD,MAAO,GACP6J,WAAY,KAIDC,GAvC6B,SAACvH,GAC3C,IAAMkF,EAAO7C,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAASC,SAIjE,OACE,cAAC,GAAD,CACEzJ,QAJgB,kBAAMoK,QAAQC,IAAI,mBAKlCtB,eAAgB6C,mBAChB5E,OAAQsC,EAHV,SAOE,eAAC3I,EAAA,QAAD,CAAMF,MAAOH,GAAOgH,eAApB,UACE,cAAC,GAAD,CAAOkE,UAAU,SACjB,cAAC5D,EAAA,QAAD,CACEC,OAAQC,EAAQ,KAChBrH,MAAOH,GAAOkH,cCOlBlH,GAASa,UAAWC,OAAO,CAC/BkG,eAAgB,CACdD,KAAM,EACNnB,eAAgB,SAChBC,WAAY,SACZ4D,cAAe,MACf0B,YAAa,IAEfjE,MAAO,CACL1F,OAAQ,GACRD,MAAO,GACP6J,WAAY,KAIDG,GAvC2B,SAACzH,GACzC,IAAMkF,EAAO7C,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAASC,SAIjE,OACE,cAAC,GAAD,CACEzJ,QAJgB,kBAAMoK,QAAQC,IAAI,iBAKlCtB,eAAgB+C,mBAChB9E,OAAQsC,EAHV,SAOE,eAAC3I,EAAA,QAAD,CAAMF,MAAOH,GAAOgH,eAApB,UACE,cAAC,GAAD,CAAOkE,UAAU,OACjB,cAAC5D,EAAA,QAAD,CACEC,OAAQC,EAAQ,KAChBrH,MAAOH,GAAOkH,cCiBlBlH,GAASa,UAAWC,OAAO,CAC/B8B,QAAS,CACP6G,cAAe,MACflI,MAAO,OACPC,OAAQ,MACRR,gBAAiB,IAEnByK,qBAAsB,CACpBhC,cAAe,cACflI,MAAO,OACPC,OAAQ,OAEVkK,cAAe,CACbjC,cAAe,SACf1C,KAAM,EACNlB,WAAY,SACZD,eAAgB,mBAIL+F,GApDiB,SAAC7H,GAC/B,IAAMkF,EAAO7C,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAASC,SAEjE,OACE,mCACE,cAAC9I,EAAA,QAAD,CAAMF,MAAOH,GAAO4C,QAApB,SACGoG,EACC,qCACE,eAAC3I,EAAA,QAAD,CAAMF,MAAOH,GAAO0L,cAApB,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEF,eAACrL,EAAA,QAAD,CAAMF,MAAOH,GAAO0L,cAApB,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,CAAkBhF,OAAO,UAI7B,qCACE,cAACrG,EAAA,QAAD,CAAMF,MAAOH,GAAO0L,gBACpB,cAACrL,EAAA,QAAD,CAAMF,MAAOH,GAAO0L,cAApB,SACE,cAAC,GAAD,cCHR1L,GAASa,UAAWC,OAAO,CAC/B0C,UAAW,CACTiG,cAAe,MACf7D,eAAgB,cAElBgG,YAAa,CACX7J,WAAY,QAEd8J,gBAAiB,CACf/J,SAAU,KAEZgK,MAAO,CACLhK,SAAU,GACVC,WAAY,UAIDgK,GA1CmB,SAACjI,GACjC,IAAMkI,EAAc7F,uBAClB,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAAS8C,YAAY5F,EAAM6C,GAAGC,SAAS+C,SAElEA,EAAO9F,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAAS+C,QACjE,EAAwCC,mBAAS,IAAjD,WAAOC,EAAP,KAAqBC,EAArB,KAQA,OANAC,qBAAU,WACRD,EAAgB,CACL,QAATH,EAAiB,CAAEzL,MAAOC,SAAOZ,UAAa,CAAEW,MAAOC,SAAOC,aAE/D,CAACuL,IAGF,eAAC5L,EAAA,QAAD,CAAMF,MAAOH,GAAOwD,UAApB,UACE,cAAC7C,EAAA,QAAD,CAAMR,MAAO,CAACH,GAAO4L,YAAa5L,GAAO6L,gBAAiBM,GAA1D,SACY,QAATF,EAAiB,MAAQD,IAE5B,cAACrL,EAAA,QAAD,CAAMR,MAAO,CAACH,GAAO4L,YAAa5L,GAAO8L,MAAOK,GAAhD,SACY,QAATF,GAAkB,c,8BCoErBjM,GAASa,UAAWC,OAAO,CAC/B0C,UAAW,CACTiG,cAAe,MACfjI,OAAQ,OACRqE,WAAY,YAGdyC,KAAM,CACJ9H,MAAOC,SAAOC,SAEhBkJ,KAAM,CACJ9J,OAAQ,KAIGwM,GArGW,SAACxI,GACzB,IAAMyI,EAAQpG,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAASsD,YAE5DC,EAAiBC,iBAAO,IAAIC,WAASC,MAAM,IAAIC,QAC/CC,EAAOL,EAAeM,YAAY,CACtCC,WAAY,CAAC,EAAG,GAChBC,YAAa,CAAC,OAAQ,YAqBxB,OAlBAZ,qBAAU,WAIR,GAHAI,EAAeS,gBACfT,EAAeU,SAAS,GAEV,SAAVZ,EAAkB,CACpB,IAAMa,EAAOT,WAASS,KACpBT,WAASU,OAAOZ,EAAgB,CAC9Ba,QAAS,EACTC,SAAU,IACVC,OAAQC,WAAOC,OACfC,iBAAiB,KAIrB,OADAP,EAAKxJ,QACE,kBAAMwJ,EAAKQ,WAEnB,CAACrB,IAEU,SAAVA,EAEA,cAAClM,EAAA,QAAD,CAAMF,MAAOH,GAAOwD,UAApB,SACE,cAACqK,GAAA,QAAD,CACE1K,KAAK,WACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,SAOpB,eAACvJ,EAAA,QAAD,CAAMF,MAAOH,GAAOwD,UAApB,UACE,cAACmJ,GAAA,QAAStM,KAAV,CACEF,MAAO,CACLyK,UAAW,CAAC,CAAEC,OAAQiC,KAF1B,SAKE,cAACvD,GAAA,QAAD,CACEpG,KAAK,MACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,UAGN,WAAV2C,GAAgC,SAAVA,IACtB,cAACI,GAAA,QAAStM,KAAV,CACEF,MAAO,CACLyK,UAAW,CAAC,CAAEC,OAAQiC,KAF1B,SAKE,cAACvD,GAAA,QAAD,CACEpG,KAAK,MACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,SAIT,SAAV2C,GACC,cAACI,GAAA,QAAStM,KAAV,CACEF,MAAO,CACLyK,UAAW,CAAC,CAAEC,OAAQiC,KAF1B,SAKE,cAACvD,GAAA,QAAD,CACEpG,KAAK,MACL5C,KAAM,GACNC,MAAOC,SAAOC,QACdP,MAAOH,GAAO4J,aC5BpB5J,GAASa,UAAWC,OAAO,CAC/B0C,UAAW,CACTiG,cAAe,SACf7D,eAAgB,gBAChBC,WAAY,YAQDiI,GA9DY,SAAChK,GAC1B,IAAMmI,EAAO9F,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,SAAS+C,QAEjE,OACE,eAAC5L,EAAA,QAAD,CAAMF,MAAOH,GAAOwD,UAApB,UAEY,SAATyI,GACC,cAAC1C,GAAA,QAAD,CACEpG,KAAK,YACL5C,KAAM,GACNC,MAAOC,SAAOC,UAIR,QAATuL,GACC,cAAChC,GAAA,QAAD,CACE9G,KAAK,QACL5C,KAAM,GACNC,MAAOC,SAAOC,UAIR,QAATuL,GACC,cAAC1C,GAAA,QAAD,CACEpG,KAAK,MACL5C,KAAM,GACNC,MAAOC,SAAOC,UAIR,SAATuL,GACC,cAAC1C,GAAA,QAAD,CACEpG,KAAK,MACL5C,KAAM,GACNC,MAAOC,SAAOC,UAIR,SAATuL,GACC,cAAC/B,GAAA,QAAD,CACE/G,KAAK,kBACL5C,KAAM,GACNC,MAAOC,SAAOC,cCrBlBV,GAASa,UAAWC,OAAO,CAC/B0C,UAAW,CACTuD,KAAM,EACNxF,MAAO,OACPyB,QAAS,GACT4C,eAAgB,SAChBC,WAAY,SACZ3E,gBAAiBT,SAAOoB,UACxBd,aAAc,EACdM,YAAa,QACbK,aAAc,EACdD,cAAe,GACfH,aAAc,CAAEE,OAAQ,EAAGD,MAAO,GAClCH,UAAW,GAEb2M,UAAW,CACTxM,MAAO,OACPC,OAAQ,GACRqB,UAAW,GACX+C,eAAgB,gBAChB6D,cAAe,OAEjBnB,KAAM,CACJxG,SAAU,GACVtB,MAAOC,SAAOC,WAIHsN,GA/CiB,SAAClK,GAC/B,IAAMsC,EAAQD,uBAAY,SAACC,GAAD,OAAsBA,EAAM6C,GAAGC,YACzD,OACE,cAAC7I,EAAA,QAAD,CAAMF,MAAOH,GAAOwD,UAApB,SACG4C,EAAM+C,MACL,qCACE,cAAC,GAAD,IACA,eAAC9I,EAAA,QAAD,CAAMF,MAAOH,GAAO+N,UAApB,UACE,cAAC,GAAD,IACA,cAAC,GAAD,UAIJ,cAACpN,EAAA,QAAD,CAAMR,MAAOH,GAAOsI,KAApB,kCCHFtI,GAASa,UAAWC,OAAO,CAC/B0C,UAAW,CACTuD,KAAM,EACNhE,iBAAkB,KAClBd,eAAgB,MAChB2D,eAAgB,SAChBC,WAAY,UAEdoI,QAAS,CACPxE,cAAe,MACflI,MAAO,OACPC,OAAQ,MACR6B,YAAa,EACbD,YAAa,WAIF8K,GA5Bc,SAACpK,GACXkC,wBAEjB,OACE,eAAC3F,EAAA,QAAD,CAAMF,MAAOH,GAAOwD,UAApB,UACE,cAAC,GAAD,IACA,cAAC,GAAD,QCFS2K,IAJAtN,UAAWC,OAAO,CAC/B0C,UAAW,KALwB,SAACM,GACpC,OAAO,cAAC,GAAD,M,kBCQHsK,GAAQC,oBAgBRC,GAAqB,WACzB,OACE,eAACF,GAAMG,UAAP,CACEC,cAAe,CACbC,YAAa,CACXvN,gBAAiBT,SAAOU,SAE1BuN,qBAAqB,EACrBC,gBAAiBlO,SAAOC,QACxBkO,aAAc,CAAE1N,gBAAiBT,SAAOU,UAP5C,UAUE,cAACiN,GAAMS,OAAP,CAAc1L,KAAK,WAAWK,UAAW2K,KACzC,cAACC,GAAMS,OAAP,CAAc1L,KAAK,OAAOK,UAAWmE,IACrC,cAACyG,GAAMS,OAAP,CAAc1L,KAAK,UAAUK,UAAWyE,QAiC/B6G,UA5BI,WAEA9I,wBACY,sBAAG,YAC9B,IAAM+I,QAAiBC,wCAEnBD,EAASE,QAEPC,2BAAgBH,GAClBI,mBAASJ,GAGTjF,QAAQC,IAAI,yDATW,GAeV5D,uBAAY,SAACC,GAAD,OAC7B8I,2BAAgB9I,EAAMgJ,SAGxB,OACE,cAACC,EAAA,QAAD,UACwB,cAAC,GAAD","file":"static/js/4.371daa98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/air-conditioner-colored.f53f3bbe.png\";","module.exports = __webpack_public_path__ + \"static/media/off.a5b38215.png\";","module.exports = __webpack_public_path__ + \"static/media/on.c7cf9c21.png\";","module.exports = __webpack_public_path__ + \"static/media/cold.28e49a1b.png\";","module.exports = __webpack_public_path__ + \"static/media/hot.a3bc03ae.png\";","import React from \"react\";\nimport {\n  ActivityIndicator,\n  Pressable,\n  StyleSheet,\n  Text,\n  View,\n} from \"react-native\";\n\nimport { Colors } from \"../../constants/styles\";\n\ntype Props = {\n  onPress: () => void;\n  isLoading?: boolean;\n  margin?: number;\n  disabled?: boolean;\n  children?: any;\n};\n\nconst Button: React.FC<Props> = ({\n  onPress,\n  isLoading,\n  disabled,\n  children,\n  margin,\n}) => {\n  const buttonStyles = { ...styles.button, margin: margin };\n  return (\n    <Pressable\n      style={({ pressed }) => [buttonStyles, pressed && styles.pressed]}\n      onPress={onPress}\n      disabled={!!isLoading}\n    >\n      <View>\n        {isLoading ? (\n          <ActivityIndicator size={\"small\"} color={Colors.neutral} />\n        ) : (\n          <Text style={styles.buttonText}>{children}</Text>\n        )}\n      </View>\n    </Pressable>\n  );\n};\n\nexport default Button;\n\nconst styles = StyleSheet.create({\n  button: {\n    borderRadius: 6,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.primary,\n    elevation: 2,\n    shadowColor: \"black\",\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n  },\n  pressed: {\n    opacity: 0.7,\n  },\n  buttonText: {\n    textAlign: \"center\",\n    color: Colors.secondary,\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n","import {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  TextInputProps,\n} from \"react-native\";\n\nimport { Colors } from \"../../constants/styles\";\n\ntype Type = React.FC<\n  TextInputProps & {\n    label: string;\n    secure?: boolean;\n    onUpdateValue: (value: string) => void;\n    isInvalid: boolean;\n  }\n>;\n\nconst Input: Type = (props) => {\n  const { label, keyboardType, secure, onUpdateValue, value, isInvalid } =\n    props;\n  return (\n    <View style={styles.inputContainer}>\n      <Text style={[styles.label, isInvalid && styles.labelInvalid]}>\n        {label}\n      </Text>\n      <TextInput\n        style={[styles.input, isInvalid && styles.inputInvalid]}\n        autoCapitalize=\"none\"\n        keyboardType={keyboardType}\n        secureTextEntry={secure}\n        onChangeText={onUpdateValue}\n        value={value}\n        {...props}\n      />\n    </View>\n  );\n};\n\nexport default Input;\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    marginVertical: 8,\n    borderBottomColor: Colors.primary,\n    borderBottomWidth: 1,\n  },\n  label: {\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  labelInvalid: {\n    color: Colors.error500,\n  },\n  input: {\n    paddingVertical: 8,\n    paddingHorizontal: 6,\n    backgroundColor: Colors.secondary,\n    borderRadius: 4,\n    fontSize: 16,\n  },\n  inputInvalid: {\n    backgroundColor: Colors.error100,\n  },\n});\n","import { useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store\";\n// import { useSelector } from \"react-redux\";\n// import { RootState } from \"../../store\";\n\nimport Button from \"../UI/Button\";\nimport Input from \"./Input\";\n\nexport type AuthData = {\n  username: string;\n  password: string;\n};\n\ntype AuthDataValidity = {\n  username: boolean;\n  password: boolean;\n};\n\ntype AuthFormProps = React.FC<{\n  isLogin?: boolean;\n  onSubmit: (props: AuthData) => void;\n  credentialsInvalid: AuthDataValidity;\n}>;\n\nconst AuthForm: AuthFormProps = ({ isLogin, onSubmit, credentialsInvalid }) => {\n  const [credentials, setCredentials] = useState({\n    username: \"Username#1\",\n    password: \"admin123@\",\n  });\n\n  const isLoading = useSelector((state: RootState) => state.auth.isLoading)\n\n  const { username: usernameIsInvalid, password: passwordIsInvalid } =\n    credentialsInvalid;\n\n  const updateInputValueHandler = (inputType: string, enteredValue: string) => {\n    setCredentials((credentials) => ({\n      ...credentials,\n      [inputType]: enteredValue,\n    }));\n  };\n\n  const submitHandler = async () => {\n    try {\n      // setIsLoading(true)\n      onSubmit({\n        username: credentials.username,\n        password: credentials.password,\n      }); \n      // setIsLoading(false)\n    } catch (err: any) {\n      console.log(err)\n      // setIsLoading(false)\n      throw new Error(err)\n    }\n  };\n\n  return (\n    <View style={styles.form}>\n      <View>\n        <Input\n          label=\"Username\"\n          onUpdateValue={(value) => updateInputValueHandler(\"username\", value)}\n          value={credentials.username}\n          isInvalid={usernameIsInvalid}\n        />\n        <Input\n          label=\"Password\"\n          onUpdateValue={(value) => updateInputValueHandler(\"password\", value)}\n          secure\n          value={credentials.password}\n          isInvalid={passwordIsInvalid}\n        />\n        <View style={styles.buttons}>\n          <Button onPress={submitHandler} isLoading={isLoading}>\n            {isLogin ? \"Log In\" : \"Sign Up\"}\n          </Button>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default AuthForm;\n\nconst styles = StyleSheet.create({\n  form: {},\n  buttons: {\n    marginTop: 12,\n  },\n});\n","import { useState } from \"react\";\nimport { Alert, StyleSheet, View } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport FlatButton from \"../UI/FlatButton\";\nimport AuthForm, { AuthData } from \"./AuthForm\";\nimport { Colors } from \"../../constants/styles\";\nimport { PasswordCredentials } from \"../../services/auth/authApi\";\n\ntype AuthContentProps = {\n  isLogin?: boolean;\n  onAuthenticate: (authData: PasswordCredentials) => void;\n};\n\nconst AuthContent: React.FC<AuthContentProps> = (props) => {\n  const { isLogin, onAuthenticate } = props;\n  const { navigate } = useNavigation();\n  const [credentialsInvalid, setCredentialsInvalid] = useState({\n    username: false,\n    password: false,\n  });\n\n  // const handleAuthModeSwitch = () => {\n  //   navigate(isLogin ? \"Signup\" : \"Login\");\n  // };\n\n  const handleSubmit = (credentials: AuthData) => {\n    let { username, password } = credentials;\n\n    username = username.trim();\n    password = password.trim();\n\n    const usernameIsValid = username.length >= 3;\n    const passwordIsValid = password.length > 6;\n\n    if (!usernameIsValid || !passwordIsValid) {\n      Alert.alert(\"Invalid input\", \"Please check your entered credentials.\");\n      setCredentialsInvalid({\n        username: !usernameIsValid,\n        password: !passwordIsValid,\n      });\n      return;\n    }\n    onAuthenticate({ username, password });\n  };\n\n  return (\n    <View style={styles.authContent}>\n      <AuthForm\n        isLogin={isLogin}\n        onSubmit={handleSubmit}\n        credentialsInvalid={credentialsInvalid}\n      />\n      {/* <View style={styles.buttons}>\n        <FlatButton onPress={handleAuthModeSwitch}>\n          {isLogin\n            ? \"Don't have an account? Sign up\"\n            : \"Already have an account? Log in\"}\n        </FlatButton>\n      </View> */}\n    </View>\n  );\n};\n\nexport default AuthContent;\n\nconst styles = StyleSheet.create({\n  authContent: {\n    marginTop: 64,\n    marginHorizontal: 32,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.secondary,\n    elevation: 2,\n    shadowColor: \"black\",\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.35,\n    shadowRadius: 4,\n  },\n  buttons: {\n    marginTop: 8,\n  },\n});\n","import React from \"react\";\nimport {\n  ActivityIndicator,\n  Pressable,\n  StyleSheet,\n  Text,\n  View,\n} from \"react-native\";\nimport AntDesign from \"@expo/vector-icons/AntDesign\"\n\nimport { Colors } from \"../../constants/styles\";\n\ntype Props = {\n  onPress: () => void;\n  isLoading?: boolean;\n  disabled?: boolean;\n  children?: any;\n};\n\nconst ProfileButton: React.FC<Props> = ({ onPress, isLoading, disabled, children }) => {\n  return (\n    <Pressable\n      style={({ pressed }) => [styles.button, pressed && styles.pressed]}\n      onPress={onPress}\n      disabled={isLoading || disabled}\n    >\n      <AntDesign name=\"user\" size={24} color={Colors.neutral} />\n    </Pressable>\n  );\n};\n\nexport default ProfileButton;\n\nconst styles = StyleSheet.create({\n  button: {\n    borderRadius: 12,\n    borderColor: Colors.neutral,\n    borderWidth: 1,\n    // paddingVertical: 6,\n    // paddingHorizontal: 12,\n    // backgroundColor: Colors.primary500,\n    elevation: 2,\n    shadowColor: \"black\",\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n  },\n  pressed: {\n    opacity: 0.7,\n  },\n  buttonText: {\n    textAlign: \"center\",\n    color: Colors.neutral,\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { Colors } from \"../../../constants/styles\";\nimport Wall from \"../../../models/Wall\";\n\nconst lineWidth = 4;\n\nconst Line: React.FC<{ points: Wall[\"points\"] }> = (props) => {\n  const { points } = props;\n  const isHorizontal =\n    points[0][0] === points[1][0] && points[0][1] !== points[1][1];\n  const width = isHorizontal\n    ? points[1][1] - points[0][1] + lineWidth / 2\n    : lineWidth;\n  const height = isHorizontal\n    ? lineWidth\n    : points[1][0] - points[0][0] + lineWidth / 2;\n\n  const styles = stylesGenerator(points, width, height);\n\n  return <View style={styles.component} />;\n};\n\nconst stylesGenerator = (\n  points: Wall[\"points\"],\n  width: number,\n  height: number\n) =>\n  StyleSheet.create({\n    component: {\n      position: \"absolute\",\n      top: points[0][0] - lineWidth / 2,\n      start: points[0][1] - lineWidth / 2,\n      width: width,\n      height: height,\n      backgroundColor: Colors.neutral,\n    },\n  });\n\nexport default Line;\n","import Room from \"@models/Room\";\nimport Wall from \"@models/Wall\";\n\nconst maxXY = (coordinates: Room[]) => {\n  let maxX = 0;\n  let maxY = 0;\n  coordinates.forEach((polygon) =>\n    polygon.geometry.coordinates.forEach((point) =>\n      point.forEach((value) => {\n        if (maxX < value[0]) {\n          maxX = value[0];\n        }\n        if (maxY < value[1]) {\n          maxY = value[1];\n        }\n      })\n    )\n  );\n  return { maxX: maxX, maxY: maxY };\n};\n\nexport const traslateRoomCoordinatesToScale = (scale: number, coordinates: Room[]) => {\n  const { maxX, maxY } = maxXY(coordinates);\n\n  return coordinates.map((room) => {\n    const room_coordinates = room.geometry.coordinates.map((polygon) => {\n      const polygon_coordinates = polygon.map(\n        (value, index) =>\n          [\n            (value[0] - maxX / 2) / scale + index * 1,\n            (value[1] - maxY / 2) / scale + index * 1,\n          ] as [number, number]\n      );\n      return polygon_coordinates;\n    });\n    return {\n      ...room,\n      geometry: { type: room.geometry.type, coordinates: room_coordinates },\n    };\n  }) as Room[];\n};\n\nexport const traslateBuildingCoordinatesScale = (\n  scale: number,\n  walls: Wall[],\n  rooms: Room[]\n) => {\n  const { maxX, maxY } = maxXY(rooms);\n\n\n  return walls.map((wall, index) => {\n    const wall_points = wall.points.map((point) => [\n      (point[0] - maxX / 2) / scale + index * 0,\n      (point[1] - maxY / 2) / scale + index * 0,\n    ]) as Wall[\"points\"];\n    return { points: wall_points } as Wall;\n  });\n};\n\nexport const roomsCoordinates = (roomsData: Room[], scale: number) =>\n  traslateRoomCoordinatesToScale(2.1, roomsData);\n\nexport const builduingCoordinates = (walls: Wall[], roomsData: Room[], scale: number) =>\n  traslateBuildingCoordinatesScale(scale, walls, roomsData);\n","import { buildingData, roomsData } from \"@constants/floorPlanData\";\nimport React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport Line from \"./Line\";\nimport { builduingCoordinates } from \"./MapHelpers\";\n\nconst scale = 2.1\n\nconst Building: React.FC<{}> = (props) => {\n  return (\n    <>\n      {builduingCoordinates(buildingData, roomsData, scale).map((wall) => (\n        <Line\n          points={wall.points}\n          key={`${wall.points[0][0]}${wall.points[0][1]}${wall.points[1][0]}${wall.points[1][1]}`}\n        />\n      ))}\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {},\n});\n\nexport default Building;\n","import React, { useState } from \"react\";\nimport { Text, StyleSheet, Pressable, View } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Colors } from \"@constants/styles\";\nimport Room from \"@models/Room\";\nimport { RootState } from \"@store\";\nimport { toggleLight } from \"@store/slices/home\";\n\nconst createPolygonPosition = (points: [number, number][]) => {\n  const style = StyleSheet.create({\n    polygon: {\n      position: \"absolute\",\n      top: points[0][0],\n      start: points[0][1],\n    },\n  });\n\n  return style.polygon;\n};\n\nconst createPolygonSize = (points: [number, number][]) => {\n  let height = Math.abs(points[0][0] - points[2][0]);\n  let width = Math.abs(points[0][1] - points[1][1]);\n\n  const style = StyleSheet.create({\n    polygon: {\n      width: width,\n      height: height,\n    },\n  });\n\n  return style.polygon;\n};\n\nconst RoomContainer: React.FC<{\n  coordinates: [number, number][];\n  properties: { id: string; name: string; empty: boolean };\n}> = (props) => {\n  const dispatch = useDispatch();\n  const { coordinates, properties } = props;\n\n  const isLightOn = useSelector(\n    (state: RootState) =>\n      !!state.home.rooms.find(\n        (room: Room) => room.properties.id === properties.id\n      )?.properties.isLightOn\n  );\n\n  let backgroundColor = isLightOn ? Colors.light : undefined;\n  backgroundColor = properties.empty ? Colors.neutral : backgroundColor;\n\n  return (\n    <Pressable\n      onPress={() => {\n        if (!properties.empty) {\n          dispatch(toggleLight({ roomId: properties.id }));\n        }\n      }}\n      style={createPolygonPosition(coordinates)}\n    >\n      <View\n        style={{\n          ...createPolygonSize(coordinates),\n          ...styles.component,\n          backgroundColor: backgroundColor,\n        }}\n      >\n        <Text\n          style={{\n            ...styles.label,\n            color: isLightOn ? Colors.primary : Colors.neutral,\n          }}\n        >\n          {properties.name}\n        </Text>\n      </View>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {\n    // borderColor: Colors.neutral,\n    // borderWidth: 2,\n\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  label: {\n    color: Colors.neutral,\n    fontSize: 8,\n  },\n});\n\nexport default RoomContainer;\n","import { roomsData } from \"@constants/floorPlanData\";\nimport React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { roomsCoordinates } from \"./MapHelpers\";\nimport RoomContainer from \"./RoomContainer\";\n\nconst scale = 2.1\n\nconst Rooms: React.FC<{}> = (props) => {\n  return (\n    <>\n      {roomsCoordinates(roomsData, scale).map((roomData) =>\n        roomData.geometry.coordinates.map((polygon, index) => (\n          <RoomContainer\n            coordinates={polygon}\n            properties={roomData.properties}\n            key={roomData.properties.name + index}\n          />\n        ))\n      )}\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {},\n});\n\nexport default Rooms;\n","import React from \"react\";\nimport { Image, Pressable, StyleSheet, View } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { ReactNativeZoomableView } from \"@openspacelabs/react-native-zoomable-view\";\nimport Navigation from \"@navigation/Navigation\";\nimport Button from \"@components/UI/Button\";\nimport Map from \"./Map\";\nimport Building from \"./Building\";\nimport Rooms from \"./Rooms\";\nimport { Props as HomeScreenNavigationProps } from \"../../../screens/HomeScreen\";\nimport { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\nimport { RootStackParamList } from \"../../../screens/types\";\n\ntype NavProps = NativeStackNavigationProp<\n  RootStackParamList,\n  \"Home\",\n  undefined\n>;\n\nconst FloorPlan: React.FC<{}> = (props) => {\n  const { navigate } = useNavigation<NavProps>();\n\n  // <ReactNativeZoomableView\n  //   zoomEnabled={true}\n  //   maxZoom={5}\n  //   minZoom={0.1}\n  //   zoomStep={0.25}\n  //   initialZoom={1}\n  //   bindToBorders={true}\n  //   style={styles.component}\n  // >\n  return (\n    <View style={styles.component}>\n      <Pressable\n        onPress={() => navigate(\"AcRemote\")}\n        style={styles.imageContainer}\n      >\n        <Image\n          source={require(\"../../../assets/icons/air-conditioner-colored.png\")}\n          style={styles.image}\n        />\n      </Pressable>\n      <View>\n        <Rooms />\n        <Building />\n      </View>\n    </View>\n  );\n  // </ReactNativeZoomableView>\n};\nconst styles = StyleSheet.create({\n  component: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  imageContainer: {\n    position: \"absolute\",\n    end: \"10%\",\n    top: \"10%\",\n    height: 150,\n    width: 150,\n  },\n  image: {\n    height: 150,\n    width: 150,\n  },\n});\n\nexport default FloorPlan;\n","import React, { useLayoutEffect } from \"react\";\nimport { View, Text, StyleSheet, Image, Pressable } from \"react-native\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\n\nimport { RootStackParamList } from \"./types\";\nimport { logout } from \"../store/slices/auth\";\nimport Button from \"../components/UI/Button\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../store\";\nimport ProfileButton from \"../components/user/ProfileButton\";\nimport FloorPlan from \"../components/Home/FloorPlan/FloorPlan\";\nimport { Colors } from \"../constants/styles\";\n\nexport type Props = NativeStackScreenProps<RootStackParamList, \"Home\">;\n\nconst HomeScreen: React.FC<Props> = (props) => {\n  const { navigation } = props;\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <ProfileButton onPress={() => navigation.navigate(\"Profile\")} />\n      ),\n    });\n  }, [navigation]);\n\n  return (\n    <View style={styles.rootContainer}>\n      \n      <FloorPlan />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    marginBottom: 8,\n  },\n  imageContainer: {\n    height: 50,\n    width: 50,\n    backgroundColor: \"pink\",\n  },\n  image: {\n    height: 50,\n    width: 50,\n  },\n});\n\nexport default HomeScreen;\n","import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { RootStackParamList } from './types'\nimport { useDispatch } from 'react-redux';\nimport Button from '../components/UI/Button';\nimport { logout } from '../store/slices/auth';\nimport { AppDispatch } from '../store';\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'Profile'>;\n\nconst ProfileScreen: React.FC<Props> = (props) => {\n  const { navigation } = props\n  const dispatch = useDispatch<AppDispatch>()\n\n  return (\n    <View style={styles.screen}>\n      <Button onPress={() => dispatch(logout())}>Logout</Button> \n    </View>\n  )\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }\n});\n\nexport default ProfileScreen;","import React from \"react\";\nimport { Dimensions, Pressable, StyleSheet } from \"react-native\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"@store\";\nimport { Colors } from \"@constants/styles\";\nimport { AsyncThunk } from \"@reduxjs/toolkit\";\nimport Animated, {\n  BaseAnimationBuilder,\n  EntryExitAnimationFunction,\n  FadeIn,\n  FadeOut,\n  FlipInEasyX,\n  FlipOutEasyX,\n  SlideInLeft,\n  SlideOutLeft,\n  RollInLeft,\n  RollOutLeft,\n} from \"react-native-reanimated\";\n\nconst RemoteBaseButton: React.FC<{\n  children?: any;\n  onPress?: () => void;\n  onLongPress?: () => void;\n  dispatchAction?: AsyncThunk<void, void, {}>;\n  empty?: boolean;\n  // TODO type entering correct\n  entering?: any;\n  exiting?: any;\n}> = (props) => {\n  const {\n    children,\n    onPress,\n    onLongPress,\n    dispatchAction,\n    empty,\n    entering,\n    exiting,\n  } = props;\n  const dispatch = useDispatch<AppDispatch>();\n\n  const handlePress = () => {\n    if (!empty) {\n      onPress && onPress();\n      dispatchAction && dispatch(dispatchAction());\n    }\n  };\n\n  return (\n    <Animated.View\n      entering={entering ? entering : SlideInLeft}\n      exiting={exiting ? exiting : SlideOutLeft}\n      style={[\n        styles.component,\n        {\n          borderColor: empty ? Colors.transparent : Colors.neutral,\n          backgroundColor: empty ? Colors.transparent : Colors.secondary,\n        },\n      ]}\n    >\n      <Pressable\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        style={{ borderWidth: 0 }}\n      >\n        {!empty && children}\n      </Pressable>\n    </Animated.View>\n  );\n};\n\nexport const styles = StyleSheet.create({\n  component: {\n    flex: 1,\n    width: 112,\n    maxWidth: 112,\n    height: 64,\n    maxHeight: 64,\n    backgroundColor: Colors.secondary,\n    borderWidth: 1,\n    borderRadius: 8,\n    // marginVertical: 24,\n    // margin: '15%'\n    // marginVertical: Dimensions.get(\"window\").height * 0.03,\n    padding: 8,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    shadowRadius: 8,\n    shadowOpacity: 0.4,\n    shadowOffset: { height: 4, width: 0 },\n    elevation: 1,\n    outlineWidth: 0,\n  },\n  text: {\n    color: Colors.neutral,\n  },\n});\n\nexport default RemoteBaseButton;\n","import React from \"react\";\nimport { changeFanSpeed } from \"@store/slices/ac\";\nimport RemoteBaseButton from \"./RemoteBaseButton\";\nimport { FontAwesome5 } from \"@expo/vector-icons\";\nimport { Colors } from \"@constants/styles\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\nimport { SlideInRight, SlideOutRight } from \"react-native-reanimated\";\n\nconst FanSpeedButton: React.FC<{}> = (props) => {\n  const isOn = useSelector((state: RootState) => state.ac.settings.power);\n\n  return (\n    <RemoteBaseButton\n      dispatchAction={changeFanSpeed}\n      empty={!isOn}\n      entering={SlideInRight}\n      exiting={SlideOutRight}\n    >\n      <FontAwesome5 name=\"fan\" size={48} color={Colors.neutral} />\n    </RemoteBaseButton>\n  );\n};\n\nexport default FanSpeedButton;\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { FontAwesome5, Ionicons, MaterialIcons } from \"@expo/vector-icons\";\nimport { RootState } from \"@store\";\nimport { changeMode } from \"@store/slices/ac\";\nimport RemoteBaseButton from \"./RemoteBaseButton\";\nimport { Colors } from \"@constants/styles\";\nimport { SlideInDown, SlideOutDown } from \"react-native-reanimated\";\n\nconst ModeButton: React.FC<{}> = (props) => {\n  const isOn = useSelector((state: RootState) => state.ac.settings.power);\n\n  const handlePress = () => console.log(\"ModeButton\");\n  return (\n    <RemoteBaseButton\n      onPress={handlePress}\n      dispatchAction={changeMode}\n      empty={!isOn}\n      // entering={SlideInDown}\n      // exiting={SlideOutDown}\n    >\n      <View style={styles.mainContainer}>\n        <View style={styles.topContainer}>\n          <FontAwesome5\n            name=\"snowflake\"\n            size={18}\n            color={Colors.neutral}\n            style={styles.icon}\n          />\n          <Ionicons\n            name=\"water\"\n            size={18}\n            color={Colors.neutral}\n            style={styles.icon}\n          />\n          <FontAwesome5\n            name=\"fan\"\n            size={18}\n            color={Colors.neutral}\n            style={styles.icon}\n          />\n        </View>\n        <View style={styles.bottomContainer}>\n          <FontAwesome5\n            name=\"sun\"\n            size={18}\n            color={Colors.neutral}\n            style={styles.icon}\n          />\n          <MaterialIcons\n            name=\"brightness-auto\"\n            size={18}\n            color={Colors.neutral}\n            style={styles.icon}\n          />\n        </View>\n      </View>\n    </RemoteBaseButton>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    color: Colors.neutral,\n    fontWeight: \"bold\",\n  },\n  mainContainer: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: \"100%\",\n    justifyContent: \"space-around\",\n  },\n  topContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  bottomContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  icon: {\n    marginHorizontal: 2,\n  },\n});\n\nexport default ModeButton;\n","import React from \"react\";\nimport { Image, StyleSheet } from \"react-native\";\nimport { turnOn, turnOff } from \"@store/slices/ac\";\nimport RemoteBaseButton from \"./RemoteBaseButton\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\nimport { SlideInRight, SlideOutRight } from \"react-native-reanimated\";\n\nconst PowerButton: React.FC<{}> = (props) => {\n  const isOn = useSelector((state: RootState) => state.ac.settings.power);\n\n  const handlePress = () => console.log(\"PowerButton\");\n\n  return (\n    <RemoteBaseButton\n      onPress={handlePress}\n      dispatchAction={isOn ? turnOff : turnOn}\n      // entering={SlideInRight}\n      // exiting={SlideOutRight}\n    >\n      {isOn ? (\n        <Image\n          source={require(\"../../../assets/icons/off.png\")}\n          style={styles.image}\n        />\n      ) : (\n        <Image\n          source={require(\"../../../assets/icons/on.png\")}\n          style={styles.image}\n        />\n      )}\n    </RemoteBaseButton>\n  );\n};\n\nconst styles = StyleSheet.create({\n  image: {\n    height: 48,\n    width: 48,\n  },\n});\nexport default PowerButton;\n","import { Colors } from \"@constants/styles\";\nimport React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nconst Arrow: React.FC<{ direction: keyof typeof styles }> = (props) => {\n  const { direction } = props;\n\n  return <View style={{ ...styles.arrow, ...styles[direction] }}></View>;\n};\n\nconst styles = StyleSheet.create({\n  arrow: {\n    width: 0,\n    height: 0,\n\n    borderStartWidth: 16,\n    borderStartColor: \"rgba(0, 0, 0, 0)\",\n\n    borderEndWidth: 16,\n    borderEndColor: \"rgba(0, 0, 0, 0)\",\n\n    borderBottomWidth: 16,\n    borderBottomColor: Colors.neutral,\n  },\n  up: {\n    transform: [{ rotate: \"0deg\" }],\n  },\n  right: {\n    transform: [{ rotate: \"90deg\" }],\n  },\n\n  down: {\n    transform: [{ rotate: \"180deg\" }],\n  },\n  left: {\n    transform: [{ rotate: \"270deg\" }],\n  },\n});\n\nexport default Arrow;\n","import React from \"react\";\nimport { Image, StyleSheet, View } from \"react-native\";\nimport { lowerTemperature } from \"@store/slices/ac\";\nimport RemoteBaseButton from \"./RemoteBaseButton\";\nimport Arrow from \"./Arrow\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\nimport { SlideInLeft, SlideOutLeft } from \"react-native-reanimated\";\n\nconst TemperatureDownButton: React.FC<{}> = (props) => {\n  const isOn = useSelector((state: RootState) => state.ac.settings.power);\n\n  const handlePress = () => console.log(\"TempDownButton\");\n\n  return (\n    <RemoteBaseButton\n      onPress={handlePress}\n      dispatchAction={lowerTemperature}\n      empty={!isOn}\n      // entering={SlideInLeft}\n      // exiting={SlideOutLeft}\n    >\n      <View style={styles.imageContainer}>\n        <Arrow direction=\"down\" />\n        <Image\n          source={require(\"../../../assets/icons/cold.png\")}\n          style={styles.image}\n        />\n      </View>\n    </RemoteBaseButton>\n  );\n};\n\nconst styles = StyleSheet.create({\n  imageContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    paddingLeft: 12,\n  },\n  image: {\n    height: 48,\n    width: 48,\n    marginLeft: 8,\n  },\n});\n\nexport default TemperatureDownButton;\n","import React from \"react\";\nimport { Image, StyleSheet, View } from \"react-native\";\nimport { raiseTemperature } from \"@store/slices/ac\";\nimport RemoteBaseButton from \"./RemoteBaseButton\";\nimport Arrow from \"./Arrow\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\nimport { SlideInRight, SlideOutRight } from \"react-native-reanimated\";\n\nconst TemperatureUpButton: React.FC<{}> = (props) => {\n  const isOn = useSelector((state: RootState) => state.ac.settings.power);\n\n  const handlePress = () => console.log(\"TempUpButton\");\n\n  return (\n    <RemoteBaseButton\n      onPress={handlePress}\n      dispatchAction={raiseTemperature}\n      empty={!isOn}\n      // entering={SlideInRight}\n      // exiting={SlideOutRight}\n    >\n      <View style={styles.imageContainer}>\n        <Arrow direction=\"up\" />\n        <Image\n          source={require(\"../../../assets/icons/hot.png\")}\n          style={styles.image}\n        />\n      </View>\n    </RemoteBaseButton>\n  );\n};\n\nconst styles = StyleSheet.create({\n  imageContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    paddingLeft: 12,\n  },\n  image: {\n    height: 48,\n    width: 48,\n    marginLeft: 8,\n  },\n});\n\nexport default TemperatureUpButton;\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport FanSpeedButton from \"./FanSpeedButtton\";\nimport ModeButton from \"./ModeButton\";\nimport PowerButton from \"./PowerButton\";\nimport TemperatureDownButton from \"./TemperatureDownButton\";\nimport TemperatureUpButton from \"./TemperatureUpButton\";\nimport RemoteBaseButton from \"./RemoteBaseButton\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\n\nconst AcButtons: React.FC<{}> = (props) => {\n  const isOn = useSelector((state: RootState) => state.ac.settings.power);\n\n  return (\n    <>\n      <View style={styles.buttons}>\n        {isOn ? (\n          <>\n            <View style={styles.buttonsColumn}>\n              <TemperatureUpButton />\n              <TemperatureDownButton />\n              <ModeButton />\n            </View>\n            <View style={styles.buttonsColumn}>\n              <PowerButton />\n              <FanSpeedButton />\n              <RemoteBaseButton empty={true} />\n            </View>\n          </>\n        ) : (\n          <>\n            <View style={styles.buttonsColumn}></View>\n            <View style={styles.buttonsColumn}>\n              <PowerButton />\n            </View>\n          </>\n        )}\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  buttons: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    height: \"55%\",\n    paddingVertical: 32,\n  },\n  powerButtonContainer: {\n    flexDirection: \"row-reverse\",\n    width: \"100%\",\n    height: \"55%\",\n  },\n  buttonsColumn: {\n    flexDirection: \"column\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n});\n\nexport default AcButtons;\n","import React, { useEffect, useState } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\nimport { Colors } from \"@constants/styles\";\n\nconst Temperature: React.FC<{}> = (props) => {\n  const temperature = useSelector(\n    (state: RootState) => state.ac.settings.temperature[state.ac.settings.mode]\n  );\n  const mode = useSelector((state: RootState) => state.ac.settings.mode);\n  const [dynamicStyle, setDynamicStyle] = useState({});\n\n  useEffect(() => {\n    setDynamicStyle([\n      mode === \"fan\" ? { color: Colors.disabled } : { color: Colors.neutral },\n    ]);\n  }, [mode]);\n\n  return (\n    <View style={styles.component}>\n      <Text style={[styles.generalText, styles.temperatureText, dynamicStyle]}>\n        {mode === \"fan\" ? \"N/A\" : temperature}\n      </Text>\n      <Text style={[styles.generalText, styles.units, dynamicStyle]}>\n        {mode !== \"fan\" && \"°C\"}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  generalText: {\n    fontWeight: \"bold\",\n  },\n  temperatureText: {\n    fontSize: 128,\n  },\n  units: {\n    fontSize: 32,\n    fontWeight: \"bold\",\n  },\n});\n\nexport default Temperature;\n","import React, { useEffect, useRef } from \"react\";\nimport { View, Text, StyleSheet, Animated, Easing } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\nimport { Colors } from \"@constants/styles\";\nimport { FontAwesome5, MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nconst Fan: React.FC<{}> = (props) => {\n  const speed = useSelector((state: RootState) => state.ac.settings.fanSpeed);\n\n  const animationValue = useRef(new Animated.Value(0)).current;\n  const spin = animationValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [\"0deg\", \"360deg\"],\n  });\n\n  useEffect(() => {\n    animationValue.stopAnimation();\n    animationValue.setValue(0);\n\n    if (speed !== \"auto\") {\n      const loop = Animated.loop(\n        Animated.timing(animationValue, {\n          toValue: 1,\n          duration: 2000,\n          easing: Easing.linear,\n          useNativeDriver: true,\n        })\n      );\n      loop.start();\n      return () => loop.stop();\n    }\n  }, [speed]);\n\n  if (speed === \"auto\") {\n    return (\n      <View style={styles.component}>\n        <MaterialCommunityIcons\n          name=\"fan-auto\"\n          size={32}\n          color={Colors.neutral}\n          style={styles.icon}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.component}>\n      <Animated.View\n        style={{\n          transform: [{ rotate: spin }],\n        }}\n      >\n        <FontAwesome5\n          name=\"fan\"\n          size={16}\n          color={Colors.neutral}\n          style={styles.icon}\n        />\n      </Animated.View>\n      {(speed === \"medium\" || speed === \"high\") && (\n        <Animated.View\n          style={{\n            transform: [{ rotate: spin }],\n          }}\n        >\n          <FontAwesome5\n            name=\"fan\"\n            size={24}\n            color={Colors.neutral}\n            style={styles.icon}\n          />\n        </Animated.View>\n      )}\n      {speed === \"high\" && (\n        <Animated.View\n          style={{\n            transform: [{ rotate: spin }],\n          }}\n        >\n          <FontAwesome5\n            name=\"fan\"\n            size={32}\n            color={Colors.neutral}\n            style={styles.icon}\n          />\n        </Animated.View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {\n    flexDirection: \"row\",\n    height: \"100%\",\n    alignItems: \"flex-end\",\n    // justifyContent: 'flex-start'\n  },\n  text: {\n    color: Colors.neutral,\n  },\n  icon: {\n    margin: 5,\n  },\n});\n\nexport default Fan;\n","import { RootState } from \"@store\";\nimport React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { FontAwesome5, Ionicons, MaterialIcons } from \"@expo/vector-icons\";\nimport { Colors } from \"@constants/styles\";\n\nconst Mode: React.FC<{}> = (props) => {\n  const mode = useSelector((state: RootState) => state.ac.settings.mode);\n\n  return (\n    <View style={styles.component}>\n      {/* <Text style={styles.text}>Mode</Text> */}\n      {mode === \"cool\" && (\n        <FontAwesome5\n          name=\"snowflake\"\n          size={32}\n          color={Colors.neutral}\n          // style={styles.icon}\n        />\n      )}\n      {mode === \"dry\" && (\n        <Ionicons\n          name=\"water\"\n          size={32}\n          color={Colors.neutral}\n          // style={styles.icon}\n        />\n      )}\n      {mode === \"fan\" && (\n        <FontAwesome5\n          name=\"fan\"\n          size={32}\n          color={Colors.neutral}\n          // style={styles.icon}\n        />\n      )}\n      {mode === \"heat\" && (\n        <FontAwesome5\n          name=\"sun\"\n          size={32}\n          color={Colors.neutral}\n          // style={styles.icon}\n        />\n      )}\n      {mode === \"auto\" && (\n        <MaterialIcons\n          name=\"brightness-auto\"\n          size={32}\n          color={Colors.neutral}\n          // style={styles.icon}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  // text: {\n  //   marginBottom: 6,\n  //   color: Colors.primary100,\n  // },\n});\n\nexport default Mode;\n","import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"@store\";\nimport Temperature from \"./Temperature\";\nimport Fan from \"./Fan\";\nimport Mode from \"./Mode\";\nimport { Colors } from \"@constants/styles\";\n\nconst AcDisplay: React.FC<{}> = (props) => {\n  const state = useSelector((state: RootState) => state.ac.settings);\n  return (\n    <View style={styles.component}>\n      {state.power ? (\n        <>\n          <Temperature />\n          <View style={styles.bottomBar}>\n            <Fan />\n            <Mode />\n          </View>\n        </>\n      ) : (\n        <Text style={styles.text}>Turn me on, baby!</Text>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {\n    flex: 1,\n    width: \"100%\",\n    padding: 32,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: Colors.secondary,\n    borderRadius: 8,\n    shadowColor: \"black\",\n    shadowRadius: 8,\n    shadowOpacity: 0.4,\n    shadowOffset: { height: 4, width: 0 },\n    elevation: 1,\n  },\n  bottomBar: {\n    width: \"100%\",\n    height: 42,\n    marginTop: 32,\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n  },\n  text: {\n    fontSize: 32,\n    color: Colors.neutral,\n  },\n});\n\nexport default AcDisplay;\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"@store\";\nimport AcButtons from \"./Buttons\";\nimport AcDisplay from \"./Display\";\nimport { Colors } from \"@constants/styles\";\n\nconst Remote: React.FC<{}> = (props) => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  return (\n    <View style={styles.component}>\n      <AcDisplay />\n      <AcButtons />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  component: {\n    flex: 1,\n    marginHorizontal: \"6%\",\n    marginVertical: \"12%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  display: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    height: \"35%\",\n    borderWidth: 1,\n    borderColor: \"white\",\n  },\n});\n\nexport default Remote;\n","import Remote from \"@components/AcController/Remote\";\nimport React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\n\nconst AcRemoteScreen: React.FC<{}> = (props) => {\n  return <Remote />;\n};\n\nconst styles = StyleSheet.create({\n  component: {},\n});\n\nexport default AcRemoteScreen;\n","import { NavigationContainer, DarkTheme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Colors } from \"../constants/styles\";\nimport LoginScreen from \"../screens/auth/LoginScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport ProfileScreen from \"../screens/ProfileScreen\";\nimport AcRemoteScreen from \"../screens/AcRemoteScreen\";\nimport { isAuthenticated } from \"../services/auth/authApi\";\nimport { getAuthDataFromSecureAsync } from \"../services/auth/localAuth\";\nimport { RootState } from \"../store\";\nimport { setState } from \"../store/slices/auth\";\n\nconst Stack = createNativeStackNavigator();\n\nconst AuthStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: { backgroundColor: Colors.primary },\n        headerTintColor: Colors.neutral,\n        contentStyle: { backgroundColor: Colors.primary },\n      }}\n    >\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n    </Stack.Navigator>\n  );\n};\n\nconst AuthenticatedStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: Colors.primary,\n        },\n        headerShadowVisible: false,\n        headerTintColor: Colors.neutral,\n        contentStyle: { backgroundColor: Colors.primary },\n      }}\n    >\n      <Stack.Screen name=\"AcRemote\" component={AcRemoteScreen} />\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n    </Stack.Navigator>\n  );\n};\n\nconst Navigation = () => {\n  // check secure storage for token\n  const dispatch = useDispatch();\n  const getDataFromLocalStorage = async () => {\n    const authData = await getAuthDataFromSecureAsync();\n    // if token is present\n    if (authData.token) {\n      // - if token is valid then store it in state\n      if (isAuthenticated(authData)) {\n        setState(authData);\n      } else {\n        // - else call refresh token function\n        console.log(\"Calling refresh function because token is expired\");\n      }\n      // else don't do anything\n    }\n  };\n\n  const isLoggedIn = useSelector((state: RootState) =>\n    isAuthenticated(state.auth)\n  );\n\n  return (\n    <NavigationContainer>\n      {isLoggedIn || true ? <AuthenticatedStack /> : <AuthStack />}\n    </NavigationContainer>\n  );\n};\nexport default Navigation;\n"],"sourceRoot":""}